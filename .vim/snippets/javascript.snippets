snippet _A
	import assign from 'lodash/assign'

snippet _a
	assign(${1:obj}, {${2}})

snippet _F
	import forEach from 'lodash/forEach'

snippet _f
	forEach(${1:arr}, (item) => {
	  ${2}
	})

snippet _IA
	import isArray from 'lodash/isArray'

snippet _ia
	isArray(${1})

snippet _IE
	import isEmpty from 'lodash/isEmpty'

snippet _ie
	isEmpty(${1})

snippet _IN
	import isNil from 'lodash/isNil'

snippet _in
	isNil(${1})

snippet _IU
	import isUndefined from 'lodash/isUndefined'

snippet _iu
	isUndefined(${1})

snippet _M
	import map from 'lodash/map'

snippet _m
	map(${1:arr}, (item) => {
	  ${2}
	})

snippet ae
	${1:document}.addEventListener('${2:event}', () => {
	  ${3:// body}
	})

snippet d
	const ${1:name} = document.querySelector('.${2:selector}')

snippet err
	console.error(${1:body})

snippet ex
	export default ${1}

snippet f
	function ${1:functionName} (${2:args}) {
	  ${3:code}
	}

snippet for
	for (let i = 0, max = ${1:arr}.length; i < max; i++) {
	  ${2:// body}
	}

snippet fe
	${1:arr}.forEach(i => {
	  ${2:// body}
	})

snippet fi
	for (${1:prop} in ${2:obj}) {
	  if (${2:obj}.hasOwnProperty(${1:prop})) {
	    ${3:// body}
	  }
	}

snippet gi
	${1:document}.getElementById('${2:id}')

snippet if
	if (${1:condition}) {
	  ${2:// body}
	}

snippet ifel
	if (${1:condition}) {
	  ${2:// body}
	} else {
	  ${3:// body}
	}

snippet im
	import ${1:variable} from '${2:package}'

snippet jest
	test('${1:description}', () => {
	  expect(${2:functionName}(${3:recived})).toEqual(${4:expected})
	})

snippet jp
	JSON.parse(${1:obj})

snippet js
	JSON.stringify(${1:obj})

snippet log
	console.log(${1})

snippet map
	${1:arr}.map(i => {
	  ${2:code}
	})

snippet r
	return ${1}

snippet rc
	import React, { Component } from 'react'

	export default class ${1:ComponentName} extends Component {
	  render () {
	    return (
	      <${2:div}>
	        <${3:code}>
	      </$2>
	    )
	  }
	}

snippet req
	const ${1:variable} = require('${2:package}')

snippet si
	setInterval(() => {
	  ${1}
	}, ${2:1000});

snippet st
	setTimeout(() => {
	    ${1:}
	}, ${2:1000});

snippet try
	try {
	  ${1}
	} catch (error) {
	  console.log(error)
	}

snippet us
	'use strict'
